# Disable machine ID generation on Mac

--- a/services/preferences/tracked/device_id_mac.cc
+++ b/services/preferences/tracked/device_id_mac.cc
@@ -6,12 +6,17 @@
 
 #include <IOKit/IOKitLib.h>
 
+#include "base/command_line.h"
 #include "base/mac/foundation_util.h"
 #include "base/mac/scoped_cftyperef.h"
 #include "base/mac/scoped_ioobject.h"
 #include "base/strings/sys_string_conversions.h"
 
 MachineIdStatus GetDeterministicMachineSpecificId(std::string* machine_id) {
+  if (base::CommandLine::ForCurrentProcess()->HasSwitch("disable-machine-id")) {
+    return MachineIdStatus::NOT_IMPLEMENTED;
+  }
+
   base::mac::ScopedIOObject<io_service_t> platform_expert(
       IOServiceGetMatchingService(kIOMasterPortDefault,
                                   IOServiceMatching("IOPlatformExpertDevice")));

--- a/components/metrics/machine_id_provider_nonwin.cc
+++ b/components/metrics/machine_id_provider_nonwin.cc
@@ -6,6 +6,7 @@
 
 #include <stdint.h>
 
+#include "base/command_line.h"
 #include "base/check.h"
 #include "base/system/sys_info.h"
 
@@ -13,12 +14,20 @@ namespace metrics {
 
 // Checks if hardware model name is available.
 bool MachineIdProvider::HasId() {
+  if (base::CommandLine::ForCurrentProcess()->HasSwitch("disable-machine-id")) {
+    return false;
+  }
+
   return !base::SysInfo::HardwareModelName().empty();
 }
 
 // On non-windows, the machine id is based on the hardware model name.
 // This will suffice as users are unlikely to change to the same machine model.
 std::string MachineIdProvider::GetMachineId() {
+  if (base::CommandLine::ForCurrentProcess()->HasSwitch("disable-machine-id")) {
+    return std::string();
+  }
+
   // Gets hardware model name. (e.g. 'Macbook Pro 16,1', 'iPhone 9,3')
   std::string hardware_model_name = base::SysInfo::HardwareModelName();
